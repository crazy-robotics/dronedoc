# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Takaki Ueno
# This file is distributed under the same license as the Dronedoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dronedoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-30 19:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:2
msgid "MoveIt!を使ってGazeboモデルを動かす"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:3
msgid ""
"この記事では、前回までに作成したiris_moveit_configパッケージとMoveIt! "
"RVizプラグインを使って動作計画を行い、ドローンの制御を行います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:5
msgid "ドローンを移動させられるようにするには、プラグインやアクションサーバーなどを実装する必要があるので、はじめにMoveIt!を用いてロボットを動かす方法と、今回使用するアプリケーションの概要を説明します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:8
msgid "MoveIt!を用いてロボットを動かす方法"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:9
msgid "MoveIt!を用いてロボットを動かすには、主に、"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:11
msgid "MoveIt!の提供するコントローラマネージャを使う"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:12
msgid "ros_controlを使う"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:14
msgid "の２つの方法があります。 以下では、これら２つの方法について説明します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:18
msgid "コントローラマネージャを使う"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:19
msgid ""
":doc:`../run_demo/run_demo` では、RVizを用いてドローンの動作計画を行いました。 "
"動作計画を行うと、生成されたドローンの動作がRVizに表示されましたが、RVizで表示されるのは計画だけなので実際にロボットを動かすには制御入力などをロボットに送るコントローラーが必要になります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:22
msgid ""
"ロボットを制御するのに必要な制御則や入力は、ロボットの種類によって異なるので、違うロボットには違うコントローラを使わなければなりません。 "
"しかし、異なるロボットのコントローラを全てMoveIt!の開発者が実装したり、誰かが実装したコントローラをその都度MoveIt!に取り入れるのは現実的ではありません。"
" そこで、MoveIt!では、`ROSアクション <http://wiki.ros.org/actionlib>`_ "
"の仕組みを用いることで、MoveIt!の提供するアクションに対応するコントローラであればどのようなものでも使用できるようにしてあります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:26
msgid ""
"ROSアクションは、ROSサービスに似た、ノードが一対一で通信するための仕組みです。 "
"サービスは、クライアントがサーバにリクエストを送信すると、結果が帰ってくるまではサーバーからのフィードバックは一切ありませんが、アクションでは実行状況に応じてフィードバックが帰ってきます。"
" また、アクションは途中で中断することも可能で、ロボットをスタートからゴールに移動させるような、時間のかかる処理に適しています。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:30
msgid ""
"MoveIt!では、下図のように、コントローラインターフェース（以下インターフェース）内で定義されたアクションクライアントが、アクションの目的であるアクションゴールを、コントローラ内で定義されたアクションサーバに送信し、それを受け取ったアクションサーバがロボットへ制御指令を入力するような形をとっています。"
" 使用するアクションの種類によって、用いるインターフェースが異なります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:33
msgid ""
"下図中のコントローラマネージャ（以下マネージャ）は、インターフェースをMoveIt!に登録する役割があります。 "
"MoveIt!にインターフェースを登録することで、生成された動作を実行する命令を受けた際に、動作の情報がインターフェースへと送られ、そこからコントローラへと送信されるようになります。"
" マネージャにはいくつかの種類があり、種類によって使用できるインターフェースが異なります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:39
msgid "生成された動作を実行する際の流れを図示すると以下のようになります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:41
msgid "インターフェースに実行する動作の情報が送信される"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:42
msgid "インターフェースがアクションサーバに対してアクションゴール（目標）を送信する"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:43
msgid "アクションゴールを受け取ったコントローラがロボットに制御入力を送る"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:47
msgid ""
"以上をまとめると、MoveIt!では、インターフェースが実行する動作の情報をコントローラへ送信し、それを受け取ったコントローラが、ロボットを動作させるための制御入力をロボットに送信する、といった形になっています。"
" "
"インターフェースが、実行される動作の情報をコントローラへ送信できるようにするためには、マネージャがインターフェースをMoveIt!に登録する必要があります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:50
msgid "以下では、マネージャ、インターフェース、コントローラのそれぞれの要素について更に詳しく見ていきます。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:53
#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:112
msgid "マネージャ"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:54
msgid "MoveIt!がデフォルトで提供しているマネージャには、以下の２つのものがあります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:56
msgid "MoveItFakeControllerManager"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:57
msgid "MoveItSimpleControllerManager"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:59
msgid ""
"MoveItFakeControllerManagerは、シミュレーションで用いられるマネージャで、RVizを使って動作を可視化するときなどに使われています。"
" "
"MoveItSimpleControllerManagerは、FollowJointTrajectoryとGripperCommandの２つのインターフェースをサポートしており、これらは実際にロボットを制御する際に使うことができます。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:62
msgid ""
"マネージャは ``controller_list`` パラメータに指定されたインターフェースをMoveIt!に登録します。 "
"同時に、制御される関節などの情報も与えられ、これをもとにロボットの制御が行われます。 パラメータに関しては、`Low Level "
"Controllers "
"<http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/controller_configuration/controller_configuration_tutorial.html>`_"
" を見てください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:66
msgid "また、使用するマネージャは、 ``moveit_controller_manager`` の値を変更することで指定できます。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:69
#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:124
msgid "インターフェース"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:70
msgid "MoveIt!がデフォルトで提供するインターフェースは以下の２つです。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:72
msgid "FollowJointTrajectoryインターフェース"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:73
msgid "アームもしくはロボット自体の制御"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:75
msgid "GripperCommandインターフェース"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:75
msgid "グリッパーの制御"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:77
msgid ""
"それぞれ、`FollowJointTrajectory "
"<http://docs.ros.org/api/control_msgs/html/action/FollowJointTrajectory.html>`_"
" アクションと、`GripperCommand "
"<https://www.google.com/search?client=ubuntu&channel=fs&q=gripper+command+action&ie=utf-8&oe=utf-8>`_"
" アクションを使用します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:80
#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:138
msgid "コントローラ"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:81
msgid "MoveItSimpleControllerManagerを使用する場合には、コントローラは自分で実装する必要があります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:83
msgid "上述の通り、FollowJointTrajectoryインターフェースはFollowJointTrajectoryアクションを、GripperCommandは、GripperCommandアクションを使うので、これらのインターフェースを使う場合には適したアクションサーバーを実装する必要があります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:85
msgid ""
"アクションサーバーの実装に関しては、`actionlibのチュートリアル "
"<http://wiki.ros.org/actionlib/Tutorials>`_ を参照してください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:88
msgid "ros_control"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:89
msgid ""
"`ros_control <https://github.com/ros-controls/ros_control/wiki>`_ "
"には、関節の速度制御や力制御、位置制御などを行うためのプラグインが複数用意されています。 "
"ros_controlに関しては、以下のリンクが参考になります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:92
msgid "`Tutorial: ROS Control <http://gazebosim.org/tutorials?tut=ros_control>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:93
msgid ""
"`Controller と HardwareInterface との間の処理の仕組み（1. ロボットモデルの定義と登録）- Qiita "
"<https://qiita.com/MoriKen/items/613635b90f3a98042dc5>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:94
msgid ""
"`Controller と HardwareInterface との間の処理の仕組み（2. RobotHWSimのプラグインについて）- "
"Qiita <https://qiita.com/MoriKen/items/5cab7436c1b36c25e0ce>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:95
msgid ""
"`Controller と HardwareInterface との間の処理の仕組み（3. Controllerについて）- Qiita "
"<https://qiita.com/MoriKen/items/c29f653d03baffe5f0e2>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:96
msgid ""
"`実機を動かす時の仕様について · Issue #46 · Nishida-Lab/motoman_project "
"<https://github.com/Nishida-Lab/motoman_project/issues/46>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:99
msgid "アプリケーションの構成"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:100
msgid "今回使用するアプリケーション全体の構成は以下のようになっています。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:104
msgid ""
"上で説明した基本の構成に、動作計画の設定を行うRVizとドローンのシミュレーションを行うPX4 SITLシミュレータが追加されています。 "
"この構成では、コントローラはROSアクションを通じて生成された動作の情報を受け取り、生成した経由点を "
"``/mavros/setpoint_position/local`` トピックにパブリッシュすることでドローンを制御します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:108
msgid "RViz"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:109
msgid ""
"RVizは :doc:`../run_demo/run_demo` "
"で見たように、経路の設定をMoveIt!側に送り、MoveIt!が生成した経路の情報を元に可視化を行います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:113
msgid "MoveItSimpleControllerManagerは、FollowJointTrajectoryインターフェースとGripperCommandインターフェースにしか対応しておらず、FollowJointTrajectoryインターフェースは多自由度の関節の制御には使えないので、新たなマネージャを作成する必要があります。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:115
msgid ""
"今回はMoveItMultiDOFControllerManagerという名前の新しいマネージャを作成します。 "
"コードの詳細については、:doc:`ctrl_manager` を参照してください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:118
msgid "moveit_multi_dof_controller_manager.cpp"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:125
msgid "上述の通り、FollowJointTrajectoryは他自由度の関節の制御には使えないので、他自由度の関節用のFollowMultiDOFJointTrajectoryインターフェースを新しく作成します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:127
msgid ""
"インターフェースはsrcディレクトリではなく、include/<package_name>ディレクトリに保存します。 "
"<package_name>の部分は自分の環境に合わせて変更してください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:130
msgid "コードの詳細については、:doc:`ctrl_interface` を参照してください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:132
msgid "follow_multi_dof_joint_trajectory_controller_handle.hpp"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:139
msgid ""
"今回は、 ``FollowMultiDOFJointTrajectory`` "
"アクションのGoalを受け取り、それをドローンに目標位置として送信するノードをコントローラーとして用います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:141
msgid "コードの詳細については、:doc:`controller` を参照してください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:143
msgid "drone_controller.cpp"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:149
msgid "CMakeLists.txt"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:150
msgid "``find_package`` に使用するパッケージを追加します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:163
msgid "コントローラインターフェースをインクルードできるように、インクルードディレクトリを指定します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:172
msgid ""
"コントローラマネージャをコンパイルしてライブラリをリンクするために以下の内容を追加します。 "
"コントローラマネージャはノードではなく、ライブラリなので、 ``add_library`` を使います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:175
msgid ""
"他のパッケージのライブラリと名前が重複しないようにライブラリ名の先頭に ``${PROJECT_NAME}_`` をつけます。 "
"今回のプロジェクト名は ``dronedoc`` なので、こうすることで "
"``libdronedoc_moveit_multi_dof_controller_manager`` という名前のライブラリができます。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:183
msgid "コントローラをコンパイルしてライブラリをリンクするために以下の内容を追加します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:191
#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:194
msgid "moveit_multi_dof_controller_manager_plugin_description.xml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:192
msgid "プラグインローダーがプラグインを見つけられるように、プラグインの情報を記述するファイルを作成します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:199
msgid "それぞれのタグ及びフィールドの意味は以下のとおりです。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:201
msgid "``path``"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:202
msgid ""
"ライブラリのパス。CMakeLists.txtの ``add_library`` 内で指定した名前の先頭に ``lib`` "
"を追加したもの（今回の場合は ``libdronedoc_moveit_multi_dof_controller_manager`` "
"）がライブラリ名になる。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:203
msgid "``type``"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:204
msgid "プラグインの型名。名前空間から指定する必要がある。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:205
msgid "``base_class``"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:206
msgid "プラグインのベースクラスの型名。名前空間から指定する必要がある。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:207
msgid "``name``"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:208
msgid "プラグイン名"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:210
msgid "``description``"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:210
msgid "プラグインの説明"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:213
msgid "package.xml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:214
msgid "pluginlibを使用するので、package.xmlの依存パッケージにpluginlibを追加します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:220
msgid ""
"また、``<export>`` タグ内でプラグインをエクスポートします。 ``moveit_core`` "
"の部分は、プラグインのベースクラスが定義されているパッケージ名を指定します。 今回は ``moveit_core`` パッケージで "
"``MoveItSimpleControllerManager`` が定義されているので、これを指定します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:230
msgid "プラグインが登録されているかを確認するには、パッケージをビルドしたあとに、以下のように ``rospack`` コマンドを使用します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:237
msgid "Launch files"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:238
msgid "今まで構築してきたアプリケーションを実行するためにいくつかのLaunchファイルを作成・編集します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:241
#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:244
msgid "iris_moveit.launch"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:242
msgid ""
"iris_moveit.launchは、シミュレーション環境（Gazebo+PX4 "
"SITL+MAVROS）とMoveIt!のノード、コントローラの起動を行います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:329
msgid "解説"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:330
msgid ""
"PX4 SITLシミュレーションで使用するURDFをxacroファイルから生成します。 "
":doc:`../create_config_pkg/create_config_pkg` で説明したように、PX4 "
"SITLシミュレーションで使用するxacroファイルとMoveIt!で使用するxacroファイルは同じものを使えないので、それぞれ別にロードします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:333
msgid ""
":doc:`../create_config_pkg/create_config_pkg` "
"では、multirotor_base.xacroファイル内の、 ``package://rotors_description`` を、全て "
"``package://mavlink_sitl_gazebo/models/rotors_description/`` "
"に置き換えましたが、xacro_sitlディレクトリに置き換えなかったパターンのものを用意し、それをロードします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:343
msgid "MoveIt!用のURDFをロードし、joint_state_publisherノードとrobot_state_publisherノードを使ってロボットの関節やフレームの状態をTFとしてパブリッシュします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:355
msgid "ベースリンクへのTFを送信するように設定します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:363
msgid ""
"iris_groupの親フレームは ``world`` になっていたので、 ``map`` から ``world`` へのTFを定義して、 "
"``world`` から ``base_link`` へのTFを利用できるようにします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:369
msgid "TFが利用不可能であるという警告が出るので、以下のTFを定義して警告が出ないようにします。 なくても構いません。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:377
msgid "MoveIt!のノードを起動します。 実際のロボットに指令を送信するので、``fake_execution`` を ``false`` にします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:388
msgid "iris_moveit_controller_manager.launch.xml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:389
msgid "iris_moveit_controller_manager.launch.xmlは、コントローラマネージャの指定とパラメータのロードを行います。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:391
msgid ""
"``moveit_controller_manager`` パラメータを変更して、作成したコントローラマネージャを使用するようにします。 "
"また、後述のcontrollers.yamlファイルをロードしてコントローラマネージャ用のパラメータをロードします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:394
msgid "iris_moveit_config/launch/iris_moveit_controller_manager.launch.xml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:400
msgid "controller.yaml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:401
msgid ""
"コントローラマネージャが使用するパラメータを記述してあるファイルです。 パラメータに関しては、`Low Level Controllers "
"<http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/controller_configuration/controller_configuration_tutorial.html>`_"
" を見てください。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:404
msgid "iris_moveit_config/config/controllers.yaml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:410
msgid "trajectory_execution.launch.xml"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:411
msgid "trajectory_execution.launch.xmlは、動作の実行に関するパラメータを設定しています。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:413
msgid ""
"現在位置がスタート位置から離れているとエラーが出て動作の実行ができません。 デフォルトでは1cm離れていたら実行できないので、 "
"``trajectory_execution/allowed_start_tolerance`` "
"パラメータの数値を変更してある程度離れていても動作の実行ができるようにします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:420
msgid ""
"また、デフォルトでは動作の実行が始まってからある程度時間が経つと動作の実行が中断されるので、``trajectory_execution/execution_duration_monitoring``"
" パラメータを ``false`` にすることでタイムアウトしないようにします。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:427
msgid "Execution"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:428
msgid "シミュレーション環境とMoveIt!のノードを起動します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:434
msgid "経路計画用にMoveIt!のプラグインを含むRVizを起動します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:440
msgid ""
"ドローンを離陸させてから設定を行い、\"Planning\"タブから\"Plan\"をクリックすると生成されたパスがRVizに表示されます。 "
"スタートが離陸前の位置になっている場合には、\"Planning\"タブの\"Query\"にある、\"Select Start "
"State\"のプルダウンメニューを\"current\"にして\"Update\"ボタンを押して現在の位置をスタートとして設定します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:443
msgid ""
"\"Execute\"ボタンを押すと、``follow_multi_dof_joint_trajectory`` "
"アクションのサーバーにゴールが送信され、アクションサーバーがmavrosのトピックを通じて目標位置を送信し始めます。 "
"``/mavros/setpoint_position/local`` "
"トピックのメッセージを使ってドローンを制御するために、モードをOFFBOARDに変更します。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:450
msgid "以下のようにドローンが目標位置に移動すれば成功です。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:454
msgid "障害物がある場合にはそれを回避する経路を生成してくれます。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:458
msgid ""
"現状では経路計画の際にロール角やピッチ角の制限を課していないので、ドローンが取ることのできない姿勢が出力されることがあります。 "
"``setpoint_position/local`` "
"トピックを用いた制御では、ヨー角のみが反映されるのでドローンの姿勢が異常になることは無いのですが、MoveIt!によって生成された動作を忠実に実行できないので、RVizの表示では回避できている障害物に衝突することがあります。"
" `Move Group Interface "
"<http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/move_group_interface/move_group_interface_tutorial.html"
"#planning-with-path-constraints>`_ を使えば経路の制限をすることができるので、これを使ってもいいかもしれません。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:463
msgid "まとめ"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:464
msgid "この記事では、MoveIt!を用いて計画した経路の経由点をmavros経由でドローンに送ることでドローンを移動させました。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:466
msgid ""
"今回は生成された経路を線形補間を用いて補間し、それを ``setpoint_position`` "
"トピックに与えることでドローンを制御しましたが、`waypoint "
"<http://wiki.ros.org/mavros#mavros.2BAC8-Plugins.waypoint>`_ "
"を用いたドローンの位置制御を試してみてもいいかもしれません。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:469
msgid "参考"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:471
msgid "pluginlib関連"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:472
msgid ""
"`pluginlib/Troubleshooting "
"<http://wiki.ros.org/pluginlib/Troubleshooting>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:473
msgid ""
"`navigationスタックで学ぶpluginlibの使い方 "
"<http://makemove.hatenablog.com/entry/2015/09/29/001725>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:476
msgid "Move Group Interface"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:477
msgid "今回はRVizからゴールやプランナの設定等を行いましたが、C++やPythonのコードからこれらの設定を行うためのインターフェースが用意されています。"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:479
msgid ""
"`Move Group C++ Interface "
"<http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/move_group_interface/move_group_interface_tutorial.html>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:480
msgid ""
"`Move Group Python Interface "
"<http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/move_group_python_interface/move_group_python_interface_tutorial.html>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:483
msgid "マニピュレータの制御"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:484
msgid ""
"`ROSによるマニピュレータの制御 <https://sites.google.com/site/robotlabo/time-"
"tracker/ros/ros-manipulator>`_"
msgstr ""

#: ../../dronedoc/source/moveit/drive_drone/drive_drone.rst:485
msgid ""
"`Gazeboによるマニピュレータのシミュレーション  <https://sites.google.com/site/robotlabo"
"/time-tracker/ros/gazebo_mani>`_"
msgstr ""

