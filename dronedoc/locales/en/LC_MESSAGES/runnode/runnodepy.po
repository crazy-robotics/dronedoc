# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Takaki Ueno
# This file is distributed under the same license as the Dronedoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dronedoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-30 19:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../dronedoc/source/runnode/runnodepy.rst:4
msgid "自作ノードを実行する（Python）"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:6
msgid "この章ではシミュレーション上のドローンを操作するROSノードをPythonで作成します。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:9
msgid "ROSパッケージを作る"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:10
msgid ""
"はじめに、自作ノードを格納するためのROSパッケージを作ります。 パッケージ名はpx4_sim_pkgとします。 "
"また、rospy、geometry_msgs、mavros_msgsパッケージを使用するので依存パッケージに追加しておきます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:20
msgid "ノードを書く"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:21
msgid "それでは実際にノードを書いてみましょう。 今回は、ドローンを2m上空に離陸させるノードを書きます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:24
msgid "このコードを ``offboard_sample.py`` という名前で、 ``px4_sim_pkg/script`` に保存してください。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:26
msgid "offboard_sample.py"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:32
msgid "コードの解説"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:37
msgid "ROSノードとして実行するPythonプログラムには一行目にこの宣言が必要です。 詳細は以下のリンクを参照してください。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:40
#, python-format
msgid ""
"`Python初歩からの学習メモ1 "
"<https://qiita.com/sesame/items/47d2694616eadb35d4bc#python%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:41
msgid ""
"`#!/bin/sh は ただのコメントじゃないよ！ Shebangだよ！ "
"<https://qiita.com/mohira/items/566ca75d704072bcb26f>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:52
msgid "mavrosパッケージで提供されるトピックやサービスを使うためのメッセージは ``mavros_msgs`` パッケージで定義されています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:58
msgid "ROSノードを ``offb_node`` という名前で初期化しています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:64
msgid ""
"Offboardコマンドのタイムアウト時間は500msなので、2Hz以上の周波数で機体にコマンドを送る必要があります。 "
"また、Offboardコマンドがタイムアウトした場合は、その直前の飛行モードに切り替わるので、PositionモードからOffboardモードに切り替えるようにしておけば、Offboardモードへの移行が失敗してもその場にとどまってくれます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:71
msgid ""
"``mavros/state`` トピックにパブリッシュされる、 ``State`` "
"型のメッセージをサブスクライブするためのサブスクライバを初期化しています。 第二引数は受け取ったメッセージを保持しておくキューのサイズです。 "
"第三引数の ``state_cb`` は受け取ったメッセージを処理するためのコールバック関数です。 ``state_cb`` "
"は次のように定義されています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:76
msgid "``State`` 型のメッセージには、機体の接続状況やモータの動作状況などが格納されています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:85
msgid ""
"``state_cb`` は ``State`` 型の変数を受け取り、それをグローバル変数 ``current_state`` "
"に格納する関数です。 受け取ったメッセージをローカル変数ではなく、グローバル変数に格納するために ``global`` キーワードを使っています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:94
msgid ""
"``mavros/setpoint_position/local`` トピックに ``PoseStamped`` "
"型のメッセージをパブリッシュするパブリッシャを初期化しています。 第三引数は受け取ったメッセージを保持しておくキューのサイズです。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:102
msgid ""
"モータの起動に用いる ``mavros/cmd/arming`` と モードの変更に用いる ``mavros/set_mode`` "
"サービスのクライアントを初期化しています。 それぞれ、 ``CommandBool`` 型と ``SetMode`` 型のメッセージを使います。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:110
msgid ""
"FCUと接続するまで待ちます。 ``current_state.connected`` はFCUと接続されているときに ``true`` "
"になるので、接続されるとwhileループから抜けます。 また、 ``rate.sleep()`` "
"は、このノードが20Hzで動作するように必要な時間だけノードを停止します。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:128
msgid ""
"あらかじめ移動先の位置をパブリッシュしておきます。 移動先の位置をパブリッシュしておかないとOffboardモードへの移行がリジェクトされます。 "
"ここでは、移動先の位置は上方向に2mとなっています。 ``PoseStamped`` の各フィールドについては "
"`geometry_msgs/PoseStamped Message "
"<http://docs.ros.org/lunar/api/geometry_msgs/html/msg/PoseStamped.html>`_"
" を見てください。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:138
msgid ""
"``SetMode`` メッセージの ``custom_mode`` フィールドを ``OFFBOARD`` にします。 "
"このメッセージをサービスサーバに送信することでモードの切り替えをおこないます。 ``SetMode`` メッセージの定義は "
"`mavros_msgs/SetMode Service "
"<http://docs.ros.org/api/mavros_msgs/html/srv/SetMode.html>`_ から見れます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:147
msgid ""
"``/mavros/cmd/arming`` サービスへ送信するためのメッセージを作成します。 ``CommandBool`` メッセージの定義は"
" `mavros_msgs/CommandBool Service "
"<http://docs.ros.org/api/mavros_msgs/html/srv/CommandBool.html>`_ にあります。 "
"mavrosパッケージで使用するメッセージの定義は、 `mavrosのROS wikiページ "
"<http://wiki.ros.org/mavros#Plugins>`_ から見ることができます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:186
msgid ""
"最初のif節は現在のモードが ``OFFBOARD`` かつ、モード切替が行われたのが5秒以上前であるときに実行されます。 "
"最後のモード切替からの経過時間は ``last_request`` 変数を使って判断しています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:189
msgid ""
"``set_mode_client(offb_set_mode)`` で、 ``offb_set_mode`` 変数のメッセージを使って "
"``mavros/set_mode`` サービスをコールしています。 "
"サービスにはリクエストのフィールド（サービスコールの際に必要な情報を与えるために使う）と、レスポンスのフィールド（処理結果等を格納するのに使う）があり、サービスコールが成功するとレスポンスが帰ってきます。"
" 今回はレスポンスの ``mode_sent`` を調べることでモード切り替えの命令がきちんと認識され、送信されたかを判断しています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:193
msgid "サービスコールが失敗した場合には例外が送出されるので、try-except節で例外をキャッチする必要があります。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:195
msgid ""
"モードが ``OFFBOARD`` の時は機体にモータを起動するように命令を送っています。 "
"この部分の処理はOffboardコマンドを送るところとほぼ同じです。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:198
msgid "最後に、ループ毎に目標位置をパブリッシュしています。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:202
msgid "ビルドする"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:203
msgid "``offboard_sample.py`` が使用するメッセージが確実に生成されているようにするためにビルドします。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:211
msgid "実行権限の付与"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:212
msgid "PythonプログラムをROSノードとして実行するには実行権限を与える必要があります。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:219
msgid "ノードの起動"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:220
msgid ""
"はじめにシミュレータを起動します。 ROSノードとの通信を行うためにはmavrosが必要なので、 "
"``mavros_posix_sitl.launch`` を使います。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:227
msgid "次に先ほど作成したノードを起動します。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:236
msgid "launchファイルを書く"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:237
msgid "シミュレータとOffboardノードを別々に起動するのは面倒なので、launchファイルにまとめて一つのコマンドで起動できるようにしましょう。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:239
msgid "``px4_sim_pkg/launch`` 以下に ``py_offb_sample.launch`` という名前で以下の内容を保存してください。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:250
msgid "以下のコマンドを使ってこのlaunchファイルからシミュレータとOffboardノードを起動できます。"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:257
msgid "参考"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:258
msgid "`mavros - ROS Wiki <http://wiki.ros.org/mavros>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:259
msgid "mavrosのROS Wikiページ"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:260
msgid "`Pythonでのグローバル（global）変数の宣言方法 <https://uxmilk.jp/12505>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:261
msgid "グローバル変数について"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:262
msgid ""
"`シンプルな配信者(Publisher)と購読者(Subscriber)を書く(Python) "
"<http://wiki.ros.org/ja/ROS/Tutorials/WritingPublisherSubscriber%28python%29>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:263
msgid "ROS Wikiのパブリッシャとサブスクライバを書くチュートリアル"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:264
msgid ""
"`シンプルなサービスとクライアントを書く (Python) "
"<http://wiki.ros.org/ja/ROS/Tutorials/WritingServiceClient%28python%29>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:265
msgid "ROS Wikiのサービスとクライアントを書くチュートリアル"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:266
msgid "`rospy/Overview/Services <http://wiki.ros.org/rospy/Overview/Services>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:267
msgid "Overview of rospy Service"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:268
msgid ""
"`Class ServiceProxy "
"<http://docs.ros.org/api/rospy/html/rospy.impl.tcpros_service"
".ServiceProxy-class.html>`_"
msgstr ""

#: ../../dronedoc/source/runnode/runnodepy.rst:269
msgid "Service Proxy API Reference"
msgstr ""

